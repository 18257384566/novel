控制器:
创建controller：
	php artisan make:controller Admin\UserController

访问控制器的方法：
	Route::get('index','IndexController@index')

引入空间名：
	use  App\Http\Controllers\Controller
	自动引入    Requ   +  回车	

被继承的模板：
	路径：layouts/master
	@yield('title','后台首页')
	@yield('content')
继承的页面：
	@extends('layouts/master')

	@section('title','')
	@endsection

引入局部视图
	@include('layouts.nav' , ['name' => '刘备'])

引入外部文件
	<link rel="stylesheet" href="{{ asset('admin/css/bootstrap.css') }}">
	<a href="{{ url('admin/userlist') }}">

视图共享：app -> Providers -> AppServerProvide.php
	全部：public function boot()
	          {
		view()->share('stu','刘备');
                           }
	局部：public function boot()
	          {
		$nav = array();

		view()->composer('layouts/master',function($view)use($nav){
          		       $view ->with('nav',$nav);
       		 });
                           }


路由分类：
	Route::group(['prefix'=>'' , 'namespace'=>''],funcion(){
		
	})

token验证：防止跨站攻击
	csrf 防护
	csrf_field
	csrf_token

路由请求方式
	1. match  指定请求的方式
		Route::match(['get','post'], '路由名称', function(){})
	2. any  使用任何一种请求方式
		Route::any('路由名称',function(){})
	
路由参数
	Route::get('/user/{id}', function($id = 1){
		
	})
	路由的传参不是$_GET中的参数

	多个路由参数：
	Route::get('/user/{id}/{action}', function($id,$action){
		
	})
	
	限制参数的格式
	Route::get('/goods/{id}',function(){})->where('id','[0-9]+');
	Route::get('/goods/{id}/{action}',function(){})->where(['id'=>'[0-9]+' , 'action'=>'[a-zA-Z]']);

设置别名：
	Route::get('home/goods/show', function(){
	        return  '商品的展示';
	})->name('show');

重定性：
	Route::get('toShow',function(){
	        return redirect('路径');
	})

显示数据：
	1. 需要将一个变量的值传递到视图中，并显示在视图里面
	Route::get('', function(){
	       $name = '刘备';
	       return view('index', ['name'=>$name]);
	})
	2. 使用compact()  直接将变量名作为参数传递到视图中
		compact('name','age');
	3. with (with传值，用的最多)
		return view('index')->with('stu', $stu)->with('student', $student);
	
blade 模板
	1. 格式：index.blade.php
	2. 显示数据：
		php原生语法  <?php echo $name; ?>
		{{ $name }}
	3. 在blade模板中会实体化变量
		取消实体化 {!! $name !!}

流程控制
	@unless():返回false执行里面的代码
		@unless(false)
		       <p>如果是false，则输出</p>
		@endunless
	
	@foreach
		@continue()：跳过当前循环
			@continue($i == 3)
	
		@break()：跳出循环
			@break($i == 3)

		@loop():索引
	@endforeach

	@forelse
		正常遍历数据
		@empty
		<p>暂无数据显示</p>
	@endforelse

http请求
	1. 获取表单数据
	var_dump($_POST);	

	2. 使用http请求，获取数据
	public function doUpdate(Rquest $request)
	{
		获取数据：
		dd($request);
		dd($request -> all());
		dd($request -> input('name'));      获取name的值
		dd($request -> name);	    直接使用name的属性值获取数据
		dd($request -> input('age','13'));   传递数据
		dd($request -> input('hobby.0'));   获取表单中数组的数据 
		
		判断：
		dump($request -> method());	            判断表单以何种方式传输数据
		dump($request -> isMethod('post'));    判断是否是post传输方式
		dd($request ->hasFile('icon'));	            判断是否有文件上传
		dd($request -> file('icon') -> isvalid);    判断上传错误
		dd($request -> has('age'));	            判断是否存在一个元素

		获取请求路径：
		dd($request -> url());         获取基本url
		dd($request -> fullUrl());    带全部参数的url

		文件上传
		dd($request -> file('icon'))        使用file方法获取传递的文件信息
		dd($request -> file('icon')->store('image'))       执行上传文件的操作
		dd($request -> path())              上传文件的路径

		dd($request -> file('icon') -> storeAs('image','1.jpg'))
		dd($public -> path())	public 目录
		dd($base -> path())		项目所在目录
	}

http数据验证
	1. 使用当前对象调用验证的方法   (如果验证不通过，会自动重定向到上一个页面，并将错误信息写入session)
	dd($this -> validate()); 
		$rules = array(
          		     'name' => 'required|between:6,18',
            		     'password' => 'required|confirmed',
     		);

		$mess = array(
		      'username.required' => '用户名不能为空',
		      'username.between' => '用户名必须在 :min和 :max之间',
		      'password.required' => '密码不能为空',
		);
       	               $this ->validate($request,$rules);

	2.使用面门
		需要引入命名空间
		use Illuminate\Support\Facades\Validator;

		$validate = Validator::make($request -> all(), $rules, $mess);
		dd($validate ->errors());     打印所有错误

		数据验证是否通过
		$validate -> fails()        true(不通过)
		$validate -> passes()     flase(不通过)

		调用一个方法，传递错误信息
		return  back() ->withErrors($validate);

		取出指定错误信息
		{{ $errors ->first('username') }}
		{{ $errors ->first('password') }}

session
	存储session
		$request -> session() -> put('name','root');
		session(['age'=>15]);
	读取session
		$request -> session() -> all();
		$request -> session() ->get('age');
	删除session
		$request -> session() -> forget('age');
		$request -> session() -> flush();

中间件
	定义中间件
		目录：app/Http/Middleware
		创建：php artisan make:middleware CheckLogin
		 将所有的业务逻辑判断写在这个方法中
			public  function  handle($request , closuer $next)
			{
				业务需求
				return $next($request);
			}
	注册中间件
		目录：app/Http/Kernel.php
	使用中间件
		1. 路由
		Route::group(['middleware' => 'check.login'], function(){
			Route::get('admin/index','Admin\IndexController@index');
		})
		2. 指定某一条路由需要使用中间件验证
		 Route::get('admin/index','Admin\IndexController@index') -> middleware('check.login');

数据库
	数据库的配置
		config/database.php
	修改数据库的配置
		只需要修改.env文件里的内容即可（.env是不会被git管理追踪的）
